package {{ package_name }};

{% for imp in imports %}
import {{ imp }};
{% endfor %}
import com.fasterxml.jackson.core.type.TypeReference; // For parsing JSON metadata
import com.fasterxml.jackson.databind.ObjectMapper; // For parsing JSON metadata
import java.io.IOException; // For parsing JSON metadata

/**
 * IDDM Connector for the {{ class_name.replace("Connector", "") }} API.
 * Implements SDK operation interfaces based on detected API capabilities.
 * Generated by DataConnectors CodeGen.
 */
@ManagedComponent
@CustomConnector(metaJson = "{{ meta_json_path }}")
public class {{ class_name }} implements
    {% for interface in interfaces -%}
    {{ interface }}{% if not loop.last %},{% endif %}
    {% endfor %}
{

    private static final Logger log = LoggerFactory.getLogger({{ class_name }}.class);

    // --- Injected Dependencies ---
    {% for field in injected_fields %}
    @Inject
    private {{ field.type }} {{ field.name }};
    {% endfor %}

    {% if resp_converter_class_name %}
    // Inject response converter for explicit use if SDK pipeline doesn't handle complex cases
    @Inject
    private {{ resp_converter_class_name }} respConverter;
    {% endif %}

    // ** Load client method metadata passed as JSON **
    private final Map<String, Map<String, Object>> clientMethodMetadata;

    // Constructor - Load metadata here
    @Inject // Ensure dependencies are available if needed during metadata loading
    public {{ class_name }}() {
         this.clientMethodMetadata = loadClientMethodMetadata();
         // Log loaded metadata keys for debugging
         if (log.isDebugEnabled()) {
             log.debug("Loaded client method metadata keys: {}", clientMethodMetadata.keySet());
         }
    }

    private Map<String, Map<String, Object>> loadClientMethodMetadata() {
        // Load the JSON string passed in the context and parse it
        // Manually escape backslashes and double quotes for Java string literal
        String metadataJson = "{{ client_method_metadata_json | replace('\\', '\\\\') | replace('"', '\\"') }}";
        ObjectMapper mapper = new ObjectMapper();
        try {
            if (metadataJson == null || metadataJson.isEmpty() || metadataJson.equals("null")) {
                 log.error("Client method metadata JSON is null or empty!");
                 return Collections.emptyMap();
            }
            TypeReference<Map<String, Map<String, Object>>> typeRef = new TypeReference<>() {};
            return mapper.readValue(metadataJson, typeRef);
        } catch (IOException e) {
            log.error("Failed to parse client method metadata JSON: {}", e.getMessage(), e);
            return Collections.emptyMap();
        }
    }


    // Optional: Constructor if explicit initialization needed beyond injection
    /*
    @Inject
    public {{ class_name }}(...) {
        // ...
    }
    */

    // --- Operation Interface Implementations ---

    {% if "Search" in operations %}
    @Override
    public List<{{ ldap_search_result_entry_type }}> search({{ backend_request_type }} request) {
        log.debug("Executing search operation with backend request: {}", request);
        // Assumes LdapToBackendRequestConverter produced the 'request' object.

        String targetMethodName = request.getTargetClientMethodName();
        if (targetMethodName == null || targetMethodName.isEmpty()) {
            log.error("Missing targetClientMethodName in BackendRequest for search. Cannot dispatch.");
            return Collections.emptyList();
        }

        Map<String, Object> methodMeta = clientMethodMetadata.get(targetMethodName);
         if (methodMeta == null) {
              // Try finding by name if key was operationId
              methodMeta = clientMethodMetadata.values().stream()
                              .filter(meta -> targetMethodName.equals(meta.get("name")))
                              .findFirst().orElse(null);
         }

        if (methodMeta == null) {
            log.error("Cannot find client method metadata for target method name '{}'. Dispatch failed.", targetMethodName);
            return Collections.emptyList();
        }
        String actualClientMethodName = (String) methodMeta.get("name");
         if (actualClientMethodName == null) {
              log.error("Metadata found for '{}' but is missing the actual method name ('name' field).", targetMethodName);
              return Collections.emptyList();
         }


        try {
            BackendResponse response = null;

            // ** Generate dispatch logic based on targetMethodName **
            // TODO: Refine argument retrieval and passing based on actual method signatures stored in metadata
            if ("listitems".equals(actualClientMethodName)) { // Example: Matches listItems operationId -> listitems method name
                log.debug("Dispatching search (LIST scope) to client method: {}.listitems()", {{ client_var_name }}.getClass().getSimpleName());
                // Assuming listitems takes no arguments other than potential query params handled by interceptor/client internally
                response = {{ client_var_name }}.listitems();
            } else if ("getitem".equals(actualClientMethodName)) { // Example: Matches getItem operationId -> getitem method name
                String resourceId = request.getResourceId();
                if (resourceId == null) {
                     log.error("ResourceId is null for target method '{}'. Cannot dispatch.", actualClientMethodName);
                     return Collections.emptyList();
                }
                log.debug("Dispatching search (BASE scope) to client method: {}.getitem({})", {{ client_var_name }}.getClass().getSimpleName(), resourceId);
                 // Assuming getitem takes String id
                response = {{ client_var_name }}.getitem(resourceId);
            }
            // ** Add more else if blocks here for other potential search methods **
            // else if ("someOtherSearchMethod".equals(actualClientMethodName)) { ... }
            else {
                 log.error("Unsupported target client method name for search operation: {}", actualClientMethodName);
                 return Collections.emptyList();
            }


            // --- Handle Response Conversion ---
            // Use the response converter to turn BackendResponse into List<SearchResultEntry> or single SearchResultEntry
            Object convertedResponse = respConverter.convert(response);

            if (convertedResponse instanceof List) {
                // Assume the list contains SearchResultEntry objects due to converter logic
                log.debug("Search successful, returning converted list.");
                 // Unchecked cast, relies on converter correctness
                return (List<{{ ldap_search_result_entry_type }}>) convertedResponse;
            } else if (convertedResponse instanceof {{ ldap_search_result_entry_type }}) {
                 // Handle case where BASE search converter returns single entry directly
                 log.debug("Search successful, returning single entry list.");
                 return Collections.singletonList(({{ ldap_search_result_entry_type }}) convertedResponse);
            } else {
                log.error("Response converter did not return a List or single {} for search.", "{{ ldap_search_result_entry_type }}");
                return Collections.emptyList();
            }

        } catch (IOException e) {
            log.error("Search operation failed during client call to '{}': {}", actualClientMethodName, e.getMessage(), e);
            // TODO: Consider mapping specific IOExceptions to SDK error responses or statuses
            return Collections.emptyList();
        } catch (Exception e) {
             log.error("Unexpected error during search operation dispatch or execution for '{}': {}", actualClientMethodName, e.getMessage(), e);
             return Collections.emptyList();
        }
    }
    {% endif %}

    {% if "Insertion" in operations %}
    @Override
    public {{ ldap_response_entity_type }}<{{ backend_response_type }}> insert({{ backend_request_type }} request) {
         log.debug("Executing insert operation with backend request: {}", request);

         String targetMethodName = request.getTargetClientMethodName();
         if (targetMethodName == null || targetMethodName.isEmpty()) {
             log.error("Missing targetClientMethodName in BackendRequest for insert. Cannot dispatch.");
              return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Internal error: Missing target method name");
         }

         Map<String, Object> methodMeta = clientMethodMetadata.get(targetMethodName);
         if (methodMeta == null) {
             methodMeta = clientMethodMetadata.values().stream().filter(meta -> targetMethodName.equals(meta.get("name"))).findFirst().orElse(null);
         }
         if (methodMeta == null) {
            log.error("Cannot find client method metadata for target method name '{}'. Dispatch failed.", targetMethodName);
             return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Internal error: Cannot find client method metadata");
         }
         String actualClientMethodName = (String) methodMeta.get("name");
         if (actualClientMethodName == null) {
             log.error("Metadata found for '{}' but is missing the actual method name ('name' field).", targetMethodName);
             return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Internal error: Client metadata missing name");
         }

         try {
             BackendResponse response = null;
             Object requestBody = request.getRequestBody(); // Assume converter prepared the correct POJO type

             // ** Generate dispatch logic **
             if ("createitem".equals(actualClientMethodName)) { // Example: Matches createItem -> createitem
                 if (requestBody == null) {
                     // TODO: Check if body is optional based on metadata signature
                     log.error("Request body is null for target method '{}'. Cannot dispatch.", actualClientMethodName);
                      return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_INVALID_REQUEST, "Request body is required");
                 }
                  // TODO: Cast requestBody to the specific type expected by createitem based on metadata signature
                 log.debug("Dispatching insert to client method: {}.createitem(<Body:{}>)", {{ client_var_name }}.getClass().getSimpleName(), requestBody.getClass().getSimpleName());
                 response = {{ client_var_name }}.createitem(requestBody); // Direct call
             }
             // ** Add more else if blocks here for other potential insert methods **
             else {
                  log.error("Unsupported target client method name for insert operation: {}", actualClientMethodName);
                  return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Unsupported operation");
             }

             // Use converter to create final ResponseEntity (handles status mapping)
             // Note: response converter expects BackendResponse, returns ResponseEntity or List<SearchResultEntry>
             // We expect ResponseEntity here.
             Object converted = respConverter.convert(response);
              if (converted instanceof {{ ldap_response_entity_type }}) {
                 return ({{ ldap_response_entity_type }}<{{ backend_response_type }}>) converted; // Assuming payload is BackendResponse
             } else {
                 log.error("Response converter did not return ResponseEntity for insert operation. Got: {}", converted != null ? converted.getClass() : "null");
                  return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Internal error: Invalid conversion result");
             }

         } catch (IOException e) {
            log.error("Insert operation failed during client call to '{}': {}", actualClientMethodName, e.getMessage(), e);
             return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_BACKEND_ERROR, "Client communication error: " + e.getMessage());
         } catch (ClassCastException e) {
             log.error("Failed to cast request body for '{}': {}. Check converter logic.", actualClientMethodName, e.getMessage(), e);
              return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Internal error: Invalid request body type");
         } catch (Exception e) {
             log.error("Unexpected error during insert operation dispatch or execution for '{}': {}", actualClientMethodName, e.getMessage(), e);
             return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Unexpected internal error: " + e.getMessage());
        }
    }
    {% endif %}

    {% if "Modification" in operations %}
    @Override
    public {{ ldap_response_entity_type }}<{{ backend_response_type }}> modify({{ backend_request_type }} request) {
        log.debug("Executing modify operation with backend request: {}", request);
        // Similar dispatch logic as insert, but typically needs resourceId and requestBody
         String targetMethodName = request.getTargetClientMethodName();
         if (targetMethodName == null || targetMethodName.isEmpty()) {
             log.error("Missing targetClientMethodName in BackendRequest for modify. Cannot dispatch.");
              return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Internal error: Missing target method name");
         }

         Map<String, Object> methodMeta = clientMethodMetadata.get(targetMethodName);
         if (methodMeta == null) {
             methodMeta = clientMethodMetadata.values().stream().filter(meta -> targetMethodName.equals(meta.get("name"))).findFirst().orElse(null);
         }
         if (methodMeta == null) {
            log.error("Cannot find client method metadata for target method name '{}'. Dispatch failed.", targetMethodName);
             return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Internal error: Cannot find client method metadata");
         }
         String actualClientMethodName = (String) methodMeta.get("name");
          if (actualClientMethodName == null) {
              log.error("Metadata found for '{}' but is missing the actual method name ('name' field).", targetMethodName);
              return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Internal error: Client metadata missing name");
          }


         try {
              BackendResponse response = null;
              String resourceId = request.getResourceId();
              Object requestBody = request.getRequestBody();

              if (resourceId == null) {
                  log.error("ResourceId is null for target method '{}'. Cannot dispatch modify.", actualClientMethodName);
                   return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_INVALID_REQUEST, "Resource ID is required for modify");
              }
              if (requestBody == null) {
                   // TODO: Check if body is optional based on metadata signature (e.g., for some PATCH)
                  log.error("Request body is null for target method '{}'. Cannot dispatch modify.", actualClientMethodName);
                   return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_INVALID_REQUEST, "Request body is required for modify");
              }

              // ** Generate dispatch logic **
              // Assuming modify operations take id and body
              // Example if patchItem existed:
              /*
              if ("patchitem".equals(actualClientMethodName)) {
                   log.debug("Dispatching modify to client method: {}.patchitem({}, <Body:{}>)", {{ client_var_name }}.getClass().getSimpleName(), resourceId, requestBody.getClass().getSimpleName());
                   // TODO: Cast requestBody to specific type expected by patchitem
                   response = {{ client_var_name }}.patchitem(resourceId, requestBody); // Direct call
              }
              */
              // ** Add more else if blocks here for other potential modify methods (PUT/PATCH) **
              // else
              {
                   log.error("Unsupported target client method name for modify operation: {}", actualClientMethodName);
                   return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Unsupported operation");
              }

             // Use converter to create final ResponseEntity
             Object converted = respConverter.convert(response);
              if (converted instanceof {{ ldap_response_entity_type }}) {
                 return ({{ ldap_response_entity_type }}<{{ backend_response_type }}>) converted;
             } else {
                 log.error("Response converter did not return ResponseEntity for modify operation. Got: {}", converted != null ? converted.getClass() : "null");
                  return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Internal error: Invalid conversion result");
             }

         } catch (IOException e) {
            log.error("Modify operation failed during client call to '{}': {}", actualClientMethodName, e.getMessage(), e);
             return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_BACKEND_ERROR, "Client communication error: " + e.getMessage());
          } catch (ClassCastException e) {
              log.error("Failed to cast request body for '{}': {}. Check converter logic.", actualClientMethodName, e.getMessage(), e);
               return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Internal error: Invalid request body type");
          } catch (Exception e) {
             log.error("Unexpected error during modify operation dispatch or execution for '{}': {}", actualClientMethodName, e.getMessage(), e);
             return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Unexpected internal error: " + e.getMessage());
        }
    }
    {% endif %}

    {% if "Deletion" in operations %}
    @Override
    public {{ ldap_response_entity_type }}<?> delete({{ backend_request_type }} request) {
        log.debug("Executing delete operation with backend request: {}", request);

         String targetMethodName = request.getTargetClientMethodName();
         if (targetMethodName == null || targetMethodName.isEmpty()) {
             log.error("Missing targetClientMethodName in BackendRequest for delete. Cannot dispatch.");
              return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Internal error: Missing target method name");
         }

        Map<String, Object> methodMeta = clientMethodMetadata.get(targetMethodName);
         if (methodMeta == null) {
             methodMeta = clientMethodMetadata.values().stream().filter(meta -> targetMethodName.equals(meta.get("name"))).findFirst().orElse(null);
         }
        if (methodMeta == null) {
            log.error("Cannot find client method metadata for target method name '{}'. Dispatch failed.", targetMethodName);
             return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Internal error: Cannot find client method metadata");
        }
        String actualClientMethodName = (String) methodMeta.get("name");
          if (actualClientMethodName == null) {
              log.error("Metadata found for '{}' but is missing the actual method name ('name' field).", targetMethodName);
              return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Internal error: Client metadata missing name");
          }

        try {
            BackendResponse response = null; // Client might return this wrapper even for void responses
            String resourceId = request.getResourceId();

             if (resourceId == null) {
                  log.error("ResourceId is null for target method '{}'. Cannot dispatch delete.", actualClientMethodName);
                   return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_INVALID_REQUEST, "Resource ID is required for delete");
              }

            // ** Generate dispatch logic **
             if ("deleteitem".equals(actualClientMethodName)) { // Example: Matches deleteItem -> deleteitem
                 log.debug("Dispatching delete to client method: {}.deleteitem({})", {{ client_var_name }}.getClass().getSimpleName(), resourceId);
                 response = {{ client_var_name }}.deleteitem(resourceId); // Direct call
             }
             // ** Add more else if blocks here for other potential delete methods **
             else {
                  log.error("Unsupported target client method name for delete operation: {}", actualClientMethodName);
                  return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Unsupported operation");
             }

            // Use converter to create final ResponseEntity (handles status mapping)
            Object converted = respConverter.convert(response);
             if (converted instanceof {{ ldap_response_entity_type }}) {
                return ({{ ldap_response_entity_type }}<?>) converted;
            } else {
                log.error("Response converter did not return ResponseEntity for delete operation. Got: {}", converted != null ? converted.getClass() : "null");
                 // Fallback to success if no exception occurred? Or rely on converter?
                 // Let's rely on converter's status mapping based on BackendResponse code.
                 return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Internal error: Invalid conversion result");
            }

        } catch (IOException e) {
            log.error("Delete operation failed during client call to '{}': {}", actualClientMethodName, e.getMessage(), e);
            // Attempt conversion from a synthetic BackendResponse indicating failure?
            BackendResponse errorResponse = new BackendResponse();
            errorResponse.setStatusCode(500); // Simulate internal/backend error
            errorResponse.setPayload(e.getMessage());
            return ({{ ldap_response_entity_type }}<?>) respConverter.convertToResponseEntity(errorResponse);
            // Or return FAILURE_OTHER directly?
            // return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_BACKEND_ERROR, "Client communication error: " + e.getMessage());
        } catch (Exception e) {
            log.error("Unexpected error during delete operation dispatch or execution for '{}': {}", actualClientMethodName, e.getMessage(), e);
            return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_OTHER, "Unexpected internal error: " + e.getMessage());
        }
    }
    {% endif %}

    {% if "TestConnect" in operations %}
    @Override
    public {{ ldap_response_entity_type }}<?> testConnection() {
        log.info("Executing testConnection operation...");
        try {
            // Call the test connection method on the client
            boolean success = {{ client_var_name }}.testConnection();
            if (success) {
                log.info("Test connection successful.");
                return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.SUCCESS, "Connection successful");
            } else {
                 log.warn("Test connection failed (client returned false).");
                return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_CANNOT_CONNECT, "Connection test failed");
            }
        } catch (Exception e) {
            log.error("Test connection failed due to exception: {}", e.getMessage(), e);
            return new {{ ldap_response_entity_type }}<>({{ response_status_enum_simple }}.FAILURE_CANNOT_CONNECT, "Connection test failed: " + e.getMessage());
        }
    }
    {% endif %}

    {% if generate_schema_extraction %}
    /**
     * Extracts the schema (object classes and attributes) supported by the connector.
     * TODO: Implement actual schema discovery logic if the API supports it.
     * This might involve calling a specific API endpoint or constructing the schema
     * based on the OpenAPI specification and mapping.
     */
    @Override
    public Object extractSchema() { // Return type might be SchemaDefinition or similar SDK object
        log.info("Executing schema extraction...");
        try {
            log.info("Executing schema extraction...");

            // TODO: Ideally, inject or access the mapping data to build the schema
            //       dynamically based on the 'mappingData' used in the converters.

            // Placeholder implementation: return an empty SchemaDefinition.
            // The actual return type required by the SDK for the SchemaExtractionOperation
            // needs clarification (e.g., SchemaDefinition, List<ObjectClassDefinition>, etc.)

            // Import SDK Schema types if not already done
            // Assuming classes like SchemaDefinition, ObjectClassDefinition, AttributeDefinition exist
            // import com.radiantlogic.iddm.connector.sdk.schema.*;

            List<ObjectClassDefinition> objectClasses = new ArrayList<>();
            // Example: Manually build based on known mapping
            /*
            Map<String, Object> mapping = ...; // Load mapping data
            Map<String, Object> mappedOcs = (Map<String, Object>) mapping.getOrDefault("object_classes", Collections.emptyMap());
            for(Map.Entry<String, Object> ocEntry : mappedOcs.entrySet()) {
                 String ocName = ocEntry.getKey();
                 Map<String, Object> ocMapping = (Map<String, Object>) ocEntry.getValue();
                 String ldapOcName = (String) ocMapping.get("ldapName");
                 // ... extract attributes ...
                 List<AttributeDefinition> attributes = ...;
                 ObjectClassDefinition ocDef = new ObjectClassDefinition(ldapOcName, attributes);
                 // ... set other properties on ocDef ...
                 objectClasses.add(ocDef);
            }
            return new SchemaDefinition(objectClasses);
            */

            log.warn("Schema extraction is not fully implemented. Returning placeholder.");
            // Return null or throw NotImplementedException? Returning null for now.
            return null;

        } catch (Exception e) {
            log.error("Schema extraction failed: {}", e.getMessage(), e);
            // Return null or throw?
            return null;
        }
    }
    {% endif %}

}
